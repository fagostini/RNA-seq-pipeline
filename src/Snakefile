# Import config file & parameters

configfile: 'config_charlotte.yaml'

# Import paths from config file

DATAPATH=config['datapath']

rule all:
    input:
        expand("results/fastqc/{sample}_fastqc.zip", sample=config["samples"]),
        expand("results/fastqc/{sample}_fastqc.html", sample=config["samples"]),
        # expand("trim_galore/{sample}_trimmed.fq.gz", sample=config["samples"]),
        # expand("mapped/{sample}.", sample=config["samples"]),
        expand("results/mapped/{sample}.Aligned.sortedByCoord.out.bam.bai", sample=config["samples"]),
        expand("results/coverage/{sample}_plus.bigwig", sample=config["samples"]),
        expand("results/coverage/{sample}_minus.bigwig", sample=config["samples"])

rule fastqc:
    input:
        fastq=expand(DATAPATH + "{sample}.fq.gz", sample=config["samples"])
    output:
        "results/fastqc/{sample}_fastqc.zip",
        "results/fastqc/{sample}_fastqc.html"
    params:
        outputfolder="results/fastqc"
    threads:
        4
    shell:
        "fastqc -t {threads} {input.fastq} --outdir {params.outputfolder}"

rule trimGalore:
    input:
        # fastq=expand(DATAPATH + "{sample}.fq.gz", sample=config["samples"])
        fastq="data/{sample}.fq.gz"
    output:
        trimmed="results/trim_galore/{sample}_trimmed.fq.gz",
        logfolder="results/logs/{sample}.fq.gz_trimming_report.txt"
    params:
        basic="-q 20 --gzip --length 16 --fastqc",
        outputfolder="-o results/trim_galore",
        log="results/trim_galore/{sample}.fq.gz_trimming_report.txt",
        adaptor="" if config["trim_galore_params"] else "-a "+config["trim_galore_params"]
    shell:
        """
        trim_galore {params.basic} {params.outputfolder} {params.adaptor} {input.fastq}
        mv {params.log} {output.logfolder}
        """

# ——————————————————
# Nobby begin

rule remove_rRNA_tRNA:
    input:
        # expand("trim_galore/{sample}_trimmed.fq.gz", sample=config["samples"])
        "results/trim_galore/{sample}_trimmed.fq.gz"
    output:
        # expand("rRNA_tRNA_removed/{sample}.rRNA_tRNA_removed.fq.gz", sample=config["samples"])
        "results/rRNA_tRNA_removed/{sample}.rRNA_tRNA_removed.fq.gz"
    log:
        # expand("logs/{sample}.rRNA_tRNA_removal.log", sample=config["samples"])
        "results/logs/{sample}.rRNA_tRNA_removed.log"
    params:
        bt2_index=config['bt2_rRNA_tRNA_index'],
        threads=8
    shell:
        """
        # set -v
        ml Bowtie2
        bowtie2 -p {params.threads} --un-gz {output} -x {params.bt2_index} -U {input} > /dev/null 2> {log}
        # set +v
        """

rule map_star:
    input:
        # expand("rRNA_tRNA_removed/{sample}.rRNA_tRNA_removed.fq.gz", sample=config["samples"])
        fastq="results/rRNA_tRNA_removed/{sample}.rRNA_tRNA_removed.fq.gz"
    output:
        # expand("mapped/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"])
        bam="results/mapped/{sample}.Aligned.sortedByCoord.out.bam",
        logfolder="results/logs/{sample}.Log.final.out"
    params:
        star_index=config['star_index'],
        # prefix = expand("mapped/{sample}.", sample=config["samples"]),
        log="results/mapped/{sample}.Log.final.out",
        outprefix="results/mapped/{sample}.",
        threads=8
    run:
        if config['seq_type'] == "RNA":
            shell("STAR --genomeDir {params.star_index} --readFilesIn {input.fastq} --readFilesCommand zcat --outFileNamePrefix {params.outprefix} --runThreadN {params.threads} --genomeLoad NoSharedMemory --outFilterMultimapNmax 1 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1  --outFilterMismatchNmax 999 --outFilterMismatchNoverReadLmax 0.04 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --outFilterType BySJout --outSAMattributes All --outSAMstrandField intronMotif --outSAMtype BAM SortedByCoordinate --quantMode GeneCounts --sjdbScore 1 --limitBAMsortRAM 60000000000")
        elif config['seq_type'] == "CLIP":
            shell("STAR --genomeDir {params.star_index} --readFilesIn {input} --readFilesCommand zcat --outFileNamePrefix {params.outprefix} --runThreadN {params.threads} --genomeLoad NoSharedMemory --readFilesCommand zcat --outSAMunmapped Within --outFilterMultimapNmax 1 --outFilterMultimapScoreRange 1 --outSAMattributes All --outSAMtype BAM Unsorted --outFilterType BySJout --outFilterScoreMin 10 --alignEndsType EndToEnd --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 60000000000")
        shell("mv {params.log} {output.logfolder}")

rule sambamba_index:
    input:
        # expand("mapped/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"])
        "results/mapped/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        # expand("mapped/{sample}.Aligned.sortedByCoord.out.bam.bai", sample=config["samples"])
        "results/mapped/{sample}.Aligned.sortedByCoord.out.bam.bai"
    params:
        threads=8
    shell:
        "sambamba index -t {params.threads} {input} {output}"

rule create_bigwig:
    input:
        "results/mapped/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        bigwig_pos="results/coverage/{sample}_plus.bigwig",
        bigwig_neg="results/coverage/{sample}_minus.bigwig",
        bg_pos=temp("results/coverage/{sample}.Signal.Unique.str1.out.bg"),
        bg_neg=temp("results/coverage/{sample}.Signal.Unique.str2.out.bg"),
        bg_multi_pos=temp("results/coverage/{sample}.Signal.UniqueMultiple.str1.out.bg"),
        bg_multi_neg=temp("results/coverage/{sample}.Signal.UniqueMultiple.str2.out.bg")
    params:
        outprefix="results/coverage/{sample}.",
        chr_lengths=config['chr_lengths']
    shell:
        """
        STAR --runMode inputAlignmentsFromBAM --inputBAMfile {input} --outWigType bedGraph --outWigStrand Stranded --outWigNorm RPM --outFileNamePrefix {params.outprefix}
        bedSort {output.bg_pos} {output.bg_pos}
        bedSort {output.bg_neg} {output.bg_neg}
        bedGraphToBigWig {output.bg_pos} {params.chr_lengths} {output.bigwig_pos}
        bedGraphToBigWig {output.bg_neg} {params.chr_lengths} {output.bigwig_neg}
        """
