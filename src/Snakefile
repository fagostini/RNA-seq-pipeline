import os
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

# Import config file & parameters
configfile: 'config.yaml'

# Import paths from config file
# DATAPATH=config['datapath']

rule all:
	input:
		expand("fastqc/{sample}_fastqc.html", sample=config["samples"]),
		expand("qorts/{sample}.firstStrand.counts", sample=config["samples"]),
		expand("qorts/{sample}.secondStrand.counts", sample=config["samples"]),
		expand("coverage/{sample}.{strand}.bedGraph", sample=config["samples"], strand=["pos", "neg"])
rule fastqc:
	input:
		lambda wildcards: config["samples"][wildcards.sample]		
	output:
		"fastqc/{sample}_fastqc.html"
	params:
		fc="--outdir fastqc",
		cluster='-N 1 -c 4 --mem=8G -t 160:00:00'
	threads:
		4
	run:
		shell("fastqc -t {threads} {input} {params.fc}")
		fastqc_out = "/".join(("fastqc", os.path.basename(input[0])))
		fastqc_out = "_".join((fastqc_out.partition(".")[0], "fastqc.html"))
		shell("mv {fastqc_out} {output}")

rule trimgalore:
	input:
		lambda wildcards: config["samples"][wildcards.sample]
	output:
		temp("trim_galore/{sample}_trimmed.fq.gz")
	params:
		basic="-q 20 --gzip --length 16 --no_report_file",
		outputfolder="-o trim_galore",
		cluster='-N 1 -c 1 --mem=16G -t 160:00:00'
	log:
		log="logs/trim_galore/{sample}.fq.gz_trimming_report.txt",
	run:
		shell("trim_galore {params.basic} {params.outputfolder} {input} &> {log}")
		trimmed_out = "/".join(("trim_galore", os.path.basename(input[0])))
		trimmed_out = "_".join((trimmed_out.partition(".")[0], "trimmed.fq.gz"))
		final_out = "/".join(("trim_galore", os.path.basename(output[0])))
		shell("mv {trimmed_out} {final_out}")

rule index_rRNA_tRNA:
	input:
		"genome/human_rRNA_tRNA/rRNA_tRNA.fa.gz"
	output:
		expand("genome/human_rRNA_tRNA/rRNA_tRNA.{count}.bt2", count=['1', '2', '3', '4']),
		expand("genome/human_rRNA_tRNA/rRNA_tRNA.rev.{count}.bt2", count=['1', '2'])
	params:
		basename="genome/human_rRNA_tRNA/rRNA_tRNA",
		cluster='-N 1 -c 8 --mem=30G -t 160:00:00'
	log:
		"logs/index_rRNA_tRNA/index_rRNA_tRNA.log"
	threads:
		8
	shell:
		"bowtie2-build --threads {threads} {input} {params.basename} &> {log}"

rule remove_rRNA_tRNA:
	input:
		fastq="trim_galore/{sample}_trimmed.fq.gz",
		index1=expand("genome/human_rRNA_tRNA/rRNA_tRNA.{count}.bt2", count=['1', '2', '3', '4']),
		index2=expand("genome/human_rRNA_tRNA/rRNA_tRNA.rev.{count}.bt2", count=['1', '2'])
	output:
		un=temp("rRNA_tRNA_removed/{sample}.rRNA_tRNA_removed.fq.gz"),
		al=temp("rRNA_tRNA_removed/{sample}.rRNA_tRNA_aligned.fq.gz"),
		tmp=temp("rRNA_tRNA_removed/{sample}.tmp")
	params:
		cluster='-N 1 -c 8 --mem=16G -t 160:00:00'
	log:
		"logs/rRNA_tRNA_removed/{sample}.rRNA_tRNA_removed.log"
	threads:
		8
	shell:
		"bowtie2 -p {threads} --un-gz {output.un} --al-gz {output.al} -x genome/human_rRNA_tRNA/rRNA_tRNA -U {input.fastq} 1> {output.tmp} 2> {log}"

rule gunzip_annotation:
	input:
		"annotation/gencode.v27.annotation.gtf.gz"
	output:
		"annotation/gencode.v27.annotation.gtf"
	params:
		cluster='-N 1 -c 1 --mem=8G -t 160:00:00'
	shell:
		"gunzip {input}"

rule gunzip_genome:
	input:
		"genome/GRCh38.primary_assembly.genome.fa.gz"
	output:
		"genome/GRCh38.primary_assembly.genome.fa"
	params:
		cluster='-N 1 -c 1 --mem=8G -t 160:00:00'
	shell:
		"gunzip {input}"

rule index_star:
	input:
		genome="genome/GRCh38.primary_assembly.genome.fa",
		annotation="annotation/gencode.v27.annotation.gtf"
	output:
		"genome/STAR_GRCh38_v27",
		"genome/STAR_GRCh38_v27/SA",
		"genome/STAR_GRCh38_v27/SAindex",
		"genome/STAR_GRCh38_v27/chrNameLength.txt"
	params:
		prefix="genome/STAR_GRCh38_v27",
		overhang="--sjdbOverhang 99",
		cluster='-N 1 -c 8 --mem=64G -t 160:00:00'
	threads:
		8
	shell:
		"""
		STAR --runMode genomeGenerate --runThreadN {threads} --genomeDir {params.prefix} --genomeFastaFiles {input.genome} --sjdbGTFfile {input.annotation} {params.overhang}
		gzip genome/GRCh38.primary_assembly.genome.fa
		gzip annotation/gencode.v27.annotation.gtf
		"""

rule map_star:
	input:
		fastq="rRNA_tRNA_removed/{sample}.rRNA_tRNA_removed.fq.gz",
		index="genome/STAR_GRCh38_v27/SAindex",
		genome="genome/STAR_GRCh38_v27"
	output:
		bam=temp("mapped/{sample}.Aligned.sortedByCoord.out.bam"),
		cnt="mapped/{sample}.ReadsPerGene.out.tab",
		jct="mapped/{sample}.SJ.out.tab",
		log="logs/map_star/{sample}.Log.final.out"
	params:
		outprefix="mapped/{sample}.",
		alignemnt="--readFilesCommand zcat --genomeLoad NoSharedMemory --twopassMode Basic --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --quantMode GeneCounts --sjdbScore 1 --limitBAMsortRAM 60000000000",
		output="--outFilterMultimapNmax 1 --outFilterMismatchNmax 999 --outFilterMismatchNoverReadLmax 0.04 --outFilterType BySJout  --outSAMattributes All --outSAMstrandField intronMotif --outSAMtype BAM SortedByCoordinate --outWigType wiggle --outWigStrand Stranded --outWigNorm RPM",
		cluster='-N 1 -c 8 --mem=64G -t 160:00:00'
	log:
		"mapped/{sample}.Log.final.out"
	threads:
		8
	shell:
		"""
		STAR --runMode alignReads --runThreadN {threads} --genomeDir {input.genome} --readFilesIn {input.fastq} --outFileNamePrefix {params.outprefix} {params.alignemnt} {params.output} &> {log}
		mv {log} {output.log}
		"""
rule sambamba_index:
	input:
		"mapped/{sample}.Aligned.sortedByCoord.out.bam"
	output:
		"mapped/{sample}.Aligned.sortedByCoord.out.bam.bai"
	params:
		cluster='-N 1 -c 8 --mem=32G -t 160:00:00'
	threads:
		8
	shell:
		"sambamba index -t {threads} {input} {output}"

#rule get_picard:
#	input:
#		HTTP.remote("https://github.com/broadinstitute/picard/releases/download/2.17.0/picard.jar", keep_local=True)
#	output:
#		"picard.jar"
#	run:
#		outputName = os.path.basename(input[0])
#		shell("mv {input} {outputName}")
#		shell("chmod a+x {outputName}")

rule remove_duplicate:
	input:
#		picard="picard.jar",
		bamfile="mapped/{sample}.Aligned.sortedByCoord.out.bam",
		index="mapped/{sample}.Aligned.sortedByCoord.out.bam.bai"
	output:
		"picarded/{sample}.Aligned.sortedByCoord.picard.bam",
	log:
		"log/remove_duplicate/{sample}.Aligned.sortedByCoord.picard.txt"
	params:
		pd="REMOVE_DUPLICATES=true ASSUME_SORT_ORDER=coordinate",
		cluster='-N 1 -c 1 --mem=30G -t 160:00:00'
	shell:
		"java -Xmx16G -jar picard.jar MarkDuplicates I={input.bamfile} O={output} M={log} {params.pd}"

rule picard_index:
	input:
		"picarded/{sample}.Aligned.sortedByCoord.picard.bam"
	output:
		"picarded/{sample}.Aligned.sortedByCoord.picard.bam.bai"
	params:
		cluster='-N 1 -c 1 --mem=16G -t 160:00:00'
	shell:
		"java -Xmx16G -jar picard.jar BuildBamIndex I={input} O={output}"

rule create_flatGFF:
	input:
		"annotation/gencode.v27.annotation.gtf.gz"
	output:
		"annotation/gencode.v27.annotation.flat.gtf.gz"
	params:
		cluster='-N 1 -c 1 --mem=16G -t 160:00:00'
	shell:
		"java -Xmx16G -jar QoRTs.jar makeFlatGff --stranded {input} {output}"

#rule get_qorts:
#	input:
#		HTTP.remote("https://github.com/hartleys/QoRTs/releases/download/1.3.0/QoRTs.jar", keep_local=True, allow_redirects=True)
#	output:
#		"QoRTs.jar"
#	run:
#		outputName = os.path.basename(input[0])
#		shell("mv {input} {outputName}")
#		shell("chmod a+x {outputName}")

rule quantification:
	input:
#		executable="QoRTs.jar",
		gff="annotation/gencode.v27.annotation.gtf.gz",
		flatfile="annotation/gencode.v27.annotation.flat.gtf.gz",
		bamfile="picarded/{sample}.Aligned.sortedByCoord.picard.bam",
		index="picarded/{sample}.Aligned.sortedByCoord.picard.bam.bai",
		chrmlen="genome/STAR_GRCh38_v27/chrNameLength.txt"
	output:
		firstStrand="qorts/{sample}.firstStrand.counts",
		secondStrand="qorts/{sample}.secondStrand.counts"
	params:
		library="--stranded --singleEnded --minMAPQ 255",
		functions="StrandCheck,GeneCalcs,writeKnownSplices,writeNovelSplices,chromCounts,writeGenewiseGeneBody,writeBiotypeCounts,calcDetailedGeneCounts,makeWiggles,writeDESeq,writeDEXSeq,writeJunctionSeqCounts",
		cluster='-N 1 -c 1 --mem=16G -t 160:00:00'
	shell:
		"""
		java -Xmx16G -jar QoRTs.jar QC {params.library} --runFunctions {params.functions} --chromSizes {input.chrmlen} {input.bamfile} {input.gff} {output.firstStrand}
		java -Xmx16G -jar QoRTs.jar QC {params.library} --stranded_fr_secondstrand --runFunctions {params.functions} --chromSizes {input.chrmlen} {input.bamfile} {input.gff} {output.secondStrand}
		"""

rule genome_coverage:
	input:
		bamfile="picarded/{sample}.Aligned.sortedByCoord.picard.bam",
		genomeSize="genome/STAR_GRCh38_v27/chrNameLength.txt"
	output:
		positive="coverage/{sample}.pos.bedGraph",
		negative="coverage/{sample}.neg.bedGraph"
	params:
		bt="-bg -split",
		cluster='-N 1 -c 1 --mem=24G -t 160:00:00'
	shell:
		"""
		genomeCoverageBed {params.bt} -strand + -ibam {input.bamfile} -g {input.genomeSize} > {output.positive}
		genomeCoverageBed {params.bt} -strand - -ibam {input.bamfile} -g {input.genomeSize} > {output.negative}
		"""
